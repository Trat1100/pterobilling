<?php

namespace Tests\Unit\Service;

use App\Game;
use App\Processors\Processor;
use App\Services\GameService;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class GameServiceTest extends TestCase
{
    use DatabaseMigrations;
    use DatabaseTransactions;

    protected GameService $service;
    protected array $create;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = app(GameService::class);
        $this->create = [
            'stub'    => 'csgo',
            'name'    => 'Counter Strike: Global Offensive',
            'nest_id' => 5,
        ];
    }

    public function test_first_or_create_finds_from_database(): void
    {
        $game = factory(Game::class)->create($this->create);

        $result = $this->service->firstOrCreate($game->id, $this->create);

        $this->assertEquals($game->id, $result->id);
    }

    public function test_first_or_create_creates_if_missing()
    {
        $game = factory(Game::class)->create($this->create);

        $this->service->firstOrCreate($game->id, $this->create);

        $this->assertDatabaseHas('games', $this->create);
    }

    public function test_get_processor_will_retrieve_processor(): void
    {
        $game = factory(Game::class)->create($this->create);

        $processor = $this->service->getProcessor($game);

        $this->assertInstanceOf(Processor::class, $processor);
    }

    public function test_get_processor_will_not_raise_exception_if_processor_does_not_exists(): void
    {
        $game = factory(Game::class)->create(array_merge(
            $this->create,
            ['stub' => 'a_very_random_stub']
        ));

        $processor = $this->service->getProcessor($game);

        $this->assertEquals(null, $processor);
    }
}
